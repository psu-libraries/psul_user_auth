<?php

/**
 * @file
 * Primary module hooks for PSUL User Auth module.
 */

use Drupal\openid_connect\Entity\OpenIDConnectClientEntity;
use Drupal\openid_connect\Plugin\OpenIDConnectClient\OpenIDConnectGenericClient;
use Drupal\user\UserInterface;

/**
 * Implements hook_openid_connect_userinfo_alter().
 *
 * Altering the following user data to ensure consist authentication.
 * - Email prevent user aliases from being used,
 * - Username (should NOT include '@psu.edu'),
 * - OIDC Name to include username (e.g. "Henninger, Mike (msh6004)").
 *
 * All changes are based on the User.Identity.Name (UPN) value.
 */
function psul_user_auth_openid_connect_userinfo_alter(array &$userinfo, array $context) {

  // Remove @psu.edu from the username.
  preg_match('/^(.+)@([^@]+)$/i', $userinfo['upn'], $matches);

  // Nothing else to do if the default email is not an email.
  if (!isset($matches[1])) {
    return;
  }

  // Forcing none alias email to be used.
  $userinfo['email'] = $userinfo['upn'];

  // Adding username to name so that users are unique.
  $userinfo['name'] .= " (" . $matches[1] . ")";

  // Set the preferred username to strip out "@psu.edu".
  $userinfo['preferred_username'] = $matches[1];
}

/**
 * Implements hook_user_format_name_alter().
 */
function psul_user_auth_user_format_name_alter(&$name, $account) {
  // Ensure that usernames are not displayed if they are email addresses, or if
  // they are generated names starting with 'oidc_'.
  $oidc_name = \Drupal::service('user.data')->get('openid_connect', $account->id(), 'oidc_name');

  if (empty($oidc_name) || strpos($oidc_name, 'oidc_') === 0) {
    return;
  }

  // Always display the oidc_name if it is set.
  $name = $oidc_name;
}

/**
 * Implements hook_openid_connect_userinfo_save().
 *
 * Assigns the administrator role to users who are in the $umg group. We're not
 * using the role mapping in the openid_connect module because that unassigns
 * admin roles from users who are not in the $umg group but have been manually
 * assigned the administrator role.
 *
 * @see https://github.com/psu-libraries/psul_user_auth/issues/2
 * @see https://www.drupal.org/project/openid_connect/issues/3492759
 * @see https://git.drupalcode.org/project/openid_connect/-/merge_requests/130/diffs
 */
function psul_user_auth_openid_connect_userinfo_save(UserInterface $account, array $context) {
  $client = OpenIDConnectClientEntity::load($context['plugin_id']);
  if (!($client->getPlugin() instanceof OpenIDConnectGenericClient)) {
    return;
  }

  $umg = 'umg-up.ul.druplars';
  $role = 'administrator';

  $user_data = \Drupal::service('user.data');

  // Get assigned role from userData.
  $role_assigned = $user_data->get('psul_user_auth', $account->id(), 'admin_role_assigned');

  // Check if the user is in the $umg group.
  if (in_array($umg, $context['userinfo']['roles'])) {
    // Check if the user already has the administrator role.
    if (!$account->hasRole($role)) {
      // Assign the administrator role.
      $account->addRole($role);
      $account->save();
    }

    // Record that this role was assigned by the psul_user_auth module.
    if (!$role_assigned) {
      $user_data->set('psul_user_auth', $account->id(), 'admin_role_assigned', $role);
    }
  }

  // Check if the user has the administrator role, isn't in the $umg group,
  // and the role_assignment is in the userData.
  if ($account->hasRole($role) && !in_array($umg, $context['userinfo']['roles']) && $role_assigned === $role) {
    // Remove the administrator role.
    $account->removeRole($role);
    $account->save();

    // Remove the record of role assignment from userData.
    $user_data->delete('psul_user_auth', $account->id(), 'admin_role_assigned');
  }

}
